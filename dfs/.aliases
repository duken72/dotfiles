export OS=$(echo $(grep -v _ID /etc/os-release | grep ID=) | cut -d'=' -f 2)
# Overwrite existing commands for better defaults
# enable color support for ls and grep
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias ldir='vdir'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    alias cal='cal --color=always -m -3 -w'
fi
alias grepr='grep -R'

# Replace ls with exa
if [ -x /usr/bin/eza ]; then
    export EZA_COLORS="uu=1;31:da=1;35"
    alias  eza='eza --git --git-ignore --icons=always'
    alias    l='eza'
    alias   ls='eza'
    alias   la='eza -a'
    alias   ll='eza -l'
    alias  lla='eza -la'
    alias ldir='eza -lD'
    alias   lt='eza --tree'
    alias  lt1='eza -l --tree --level=1'
    alias  lt2='eza -l --tree --level=2'
    alias   cL='cl; eza'
    function cd {
        builtin cd "$@" && eza --git --git-ignore --icons
    }
else
    alias    l='ls -C'
    alias   la='ls -A'
    alias   ll='ls -lh'
    alias  lla='ls -Alh'
    alias ldir="ls -lhF --color | grep --color=never '^d'"
    alias   lt='tree'
    alias  lt1='tree -L 1'
    alias  lt2='tree -L 2'
    alias   cL='cl; ls'
    function cd {
        builtin cd "$@" && ls -CA
    }
fi

alias rm='rm -vr'
alias mv='mv -v' # interactive
alias cat='cat -n' # with line numbers
# [ -x /usr/bin/pygmentize ] && alias cat='pygmentize -g'
[ -x /usr/bin/bat ] && alias cat='bat'
alias mkdir='mkdir -p'
alias dirs='dirs -v'
alias cp='cp -r' # recursive
if [ -x /usr/bin/rsync ]; then
    alias rsync='rsync -rahp --info=progress2'
    #alias cp='rsync'
fi
alias less='less -N -R --use-color -DC+y -Du+b -DP+g -DN+y -DE+r'
alias ip='ip -color=auto' # with colors
alias dmesg='sudo dmesg -H --color=always' # with colors
alias diff='diff --color=auto' # with colors
alias zip='zip -er9' # encryption and recursive
alias curl='curl --compressed'
# alias fd='fd --color always'
alias find='fd'

# -------------------------------------------------------- #
# CD GENERIC
alias c='cl; cd'
alias -- -='cd -'
alias ..='cd ..'
alias ...='cd ../..'
alias .2='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'

alias dfs='c ~/.dotfiles'
alias dot='c ~/.dotfiles'
alias pkg='c ~/.dotfiles/pkg'
alias doc='c ~/Documents'
alias bok='c ~/Documents/books'
alias pds='c ~/Documents/personal-docs'
alias dow='c ~/Downloads'
alias mus='c ~/Music'
alias pic='c ~/Pictures'
alias vid='c ~/Videos'
alias dev='c /dev'
alias etc='c /etc'
alias tmp='c /tmp'
alias usr='c /usr'
alias var='c /var'


# -------------------------------------------------------- #
# System
# Memory
alias df='df -h'
alias duh='du -ahd 1'
alias mem='ncdu --show-graph --show-percent --group-directories-first --show-itemcount'
alias hist='history'
alias cl='clear' # for terminator, just Ctrl+L
alias rb='sudo shutdown -r now'
alias sdn='sudo shutdown now'

# dotfiles and config
alias      ag='alias | grep'
alias  ealias='v ~/.aliases && . ~/.aliases'
alias ebashrc='v ~/.bashrc  && . ~/.bashrc'
alias  ezshrc='v ~/.zshrc   && . ~/.zshrc'
alias  talias='. ~/.aliases'
alias tbashrc='. ~/.bashrc'
alias  tzshrc='. ~/.zshrc'
alias      cf='c ~/.dotfiles/config'
alias     cfg='c ~/.config'
alias polybar='tmux_start_detach_session polybar "polybar --reload duck-mainbar"'
# syncing with git
alias dst='dfs && gst'
alias dpl='dfs && git pull origin'
function dps {    # dotfiles push
    cd ~/.dotfiles
    gaps "$1"
}
# NMCLI
# alias rwifi='nmcli radio wifi off && nmcli radio wifi on'

# Mount
alias usbg='echo "usbmount /dev/drive_name, drive_name from lsblk"'
alias usbmount='udisksctl mount -b' # /dev/drive_name, drive_name from lsblk
alias usbunmount='udisksctl unmount -b' # /dev/drive_name, drive_name from lsblk


# -------------------------------------------------------- #
# OS SPECIFIC

# OSD
[[ $OS = 'osd' ]] && alias vc='osd-vpn-connect'

# Ubuntu
if [ $OS = 'ubuntu' ]; then
    # apt - Advance Package Tool
    alias     ai='sudo apt -y install'
    alias  aptud='sudo apt update'
    alias  aptug='sudo apt dist-upgrade'
    alias aptudg='aptud && time aptug'
    # dist-upgrade will install & remove packages as necessary to resolve dependencies
    alias     fd='fdfind'
fi

# Arch Linux
if [ $OS = 'arch' ]; then
    # pacman - Package Manager
    alias  pacs='sudo pacman -S --needed'
    alias pacss='pacman -Ss'
    alias  pacr='sudo pacman -R'
    if [ -x /usr/bin/fzf ]; then
        alias pacs="pacman -Slq | fzf --multi --preview 'pacman -Si {1}' | xargs -ro sudo pacman -S --needed"
        alias pacu="sudo pacman -Sy && pacman -Qqu | fzf --multi --preview 'pacman -Si {1}' | xargs -ro sudo pacman -S --needed"
        alias pacr="pacman -Qq | fzf --multi --preview 'pacman -Qi {1}' | xargs -ro sudo pacman -Rns"
    fi
    alias    pacsy='sudo pacman -Sy'
    alias   pacsyu='sudo pacman -Syu'
    alias     pacq='pacman -Q'
    alias     pacg='pacman -Sg'

    # AURA - AUR Helper
    alias    auraa='aura -Aax'
    alias    aurar='aura -R'
    alias   auraas='aura -As'
    alias   auraau='aura -Auax'

    # System cleaning
    alias  orphans='pacman -Qtdq | sudo pacman -Rns -'
    alias orphans2='pacman -Qqd | sudo pacman -Rsu -'
    alias  cache_show='find ~/.cache/ -type f -atime +72'
    alias cache_clean='find ~/.cache/ -type f -atime +72 -delete'
fi

# DUAL BOOT with WINDOWS
if [ -d /home/${USER}/.Windows ]; then
    alias unmountw='sudo umount /home/$USER/.Windows'
    alias mountw='unmountw; sudo mount.ntfs-3g /dev/nvme0n1p3 /home/$USER/.Windows'
fi


# -------------------------------------------------------- #
# Applications specific

# Generic
function o {
    xdg-open "$1"
    [[ "$1" == *".pdf" ]] && exit
}
alias of='o .'
alias run='./run.sh'
alias bt='bashtop'
alias neofetch='neofetch --colors 2 1 1 1 7 2'

# Ranger
function ra {
    ranger $@
    clear && ls
}

# TMUX
function tmux_start_detach_session {
    # $1 - session name
    # $2 - command
    tmux new -d -s "$1" "$2"
}
# https://github.com/sebastienrousseau/dotfiles/blob/master/lib/aliases/tmux/tmux.aliases.sh
alias tm='tmux'                     # Start tmux
alias tmn="tmux new-session"        # Start a new tmux session
alias tmns='tmux new-session -s'    # Start a new tmux session with name
alias tml='tmux list-sessions'      # List tmux sessions
alias tma="tmux attach-session -t"  # Attach to a tmux session with name
alias tmk='tmux kill-session -t'    # Kill tmux session with name

# Python
alias py='python3'
alias ipy='ipython3'
# Activate virtual environment
function act {
    for DIR in venv .venv; do
        if [ -d "$DIR" ]; then
            source "$DIR/bin/activate"
            break
        fi
    done
}
# Deactivate virtual environment
alias deact='deactivate'
# Jupyter-notebook
function jn {
    tmux_start_detach_session jupyter "jupyter-notebook '$1'"
}
function jl {
    tmux_start_detach_session jupyter "jupyter-lab '$1'"
}

# Editors
# The first existing editor will be chosen by priority:
# Neovim, Vim, Vi, VSCode
for editor in nvim vim vi code; do
  if type $editor &> /dev/null; then
    alias v='$editor'
    alias sv='sudo -E $editor'
    break
  fi
done

# convert a file to pdf, at least work with pptx
alias pdfConvert='soffice --headless --convert-to pdf'

# LaTeX
# alias tlmgr='/usr/share/texmf-dist/scripts/texlive/tlmgr.pl --usermode'
function lmk {
    tmux_start_detach_session latexmk "latexmk -pdflatex='xelatex %O %S' -pdf -pvc '$1'"
    # tmux_start_detach_session latexmk "latexmk -pdf -pvc '$1'"
}

alias clock='tty-clock -sc -C 1 -f %A,%d-%b-%Y'

# IBUS Unikey
alias ibus-daemon-start='tmux_start_detach_session ibus-daemon ibus-daemon'
function ibus-set-keyboard {
    tmux has-session -t "ibus-daemon" 2>/dev/null || ibus-daemon-start
    sleep 0.14s && ibus engine $1
}
alias vnk='ibus-set-keyboard Unikey'
alias dek='ibus-set-keyboard xkb:de:nodeadkeys:deu'
alias enk='ibus-set-keyboard xkb:us::eng'
alias ik='enk && tmux has-session -t "ibus-daemon" 2>/dev/null && tmk ibus-daemon'
# Alsa mixer
alias usound='amixer -q -D pulse sset Master 14%+'
alias dsound='amixer -q -D pulse sset Master 14%-'

# Git
alias    g='git'
alias   gi='git init'
alias  gcl='git clone'
alias  gst='git status'
alias   ga='git add'
alias  gaa='git add .'
alias grst='git restore'
alias  grs='git reset'
alias   gc='git commit'
alias  gci='git commit -m'
alias  gac='git commit -am'
alias gcis='git commit -S -m'
alias gacs='git commit -S -am'
alias  gft='git fetch'
alias  gps='git push origin'
alias  gpl='git pull origin --prune'
alias  gbr='git branch -a'
alias  gbd='git branch -D'
alias  gco='git checkout'
alias  gdf='git diff'
function gap {
    gaa; gci "$1"; gps
}
function gaps {
    gaa; gcis "$1"; gps
}

# SVN
alias  sco='svn checkout'
alias supd='svn update'
alias  sst='svn status'
alias   sa='svn add'
alias sdel='svn delete'
alias   sm='svn move'
alias   sr='svn revert'
alias  sdf='svn diff -x -w "$@" | delta'
alias  sci='svn commit -m'

# Docker
alias   dp='docker pull'
alias   dt='docker tag'
alias   di='docker images'
alias drmi='docker rmi'
alias dcon='docker ps'
alias  dca='docker ps -a'
alias  drm='docker rm'
alias dros='docker run -it --rm --env="DISPLAY" --env="QT_X11_NO_MITSHM=1" --volume="/tmp/.X11-unix:/tmp/.X11-unix:rw" osrf/ros:humble-desktop'

# Steam
function steamid {
    /usr/bin/find ~/.local/share/Steam/steamapps/ -maxdepth 1 -type f -name '*.acf' -exec awk -F '"' '/"appid|name/{ printf $4 "|" } END { print "" }' {} \; | column -t -s '|' | sort -k 2 | grep -i "$1"
    echo "prime-run steam steam://rungameid/[steamid]"
}

# Nvidia
alias nvidia-smi='clear; nvidia-smi'

# MOC - Music On Console
alias mocp='mocp -O shuffle=yes -O repeat=yes'

# BORIS
alias boris='tmux_start_detach_session boris "cd ~/WS/BORIS && act && python start_boris.py"'

# Others
alias weather='clear && curl wttr.in'
alias speedtest='curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python - --bytes'
alias myip='dig +short txt ch whoami.cloudflare @1.0.0.1'
function diet {
    cd ~/Documents && clear
    gawk -v dow=$(date +%A) '$2 == dow {$1=$7=""; print}' diet2.md 
    # cat diet.md
}
alias gtd='o ~/WS/learningNotes/notes/images/workflow-diagram-gtd.png'
alias ssh-ubuntu='ssh -p 2222 duken72@localhost'

# Kitty
alias icat='kitten icat'
alias diff='kitten diff'

# -------------------------------------------------------- #
# Workspaces
alias    ws='c ~/WS'
# on GitHub
alias cfd='c ~/WS/codingForDummies && gst'
alias  cv='c ~/WS/Curriculum-Vitae-Latex'
alias not='c ~/WS/learningNotes'
alias nov='c ~/WS/learningNotes && v'
alias nol='c ~/WS/notesLatex'
alias kno='c ~/WS/knowledge-obsidian'
alias  nn='c ~/WS/neural-network-test && v'
alias ccom='c ~/WS/coding-competitions&& v'
alias aoc='c ~/WS/Advent-of-Code/AoC-2025'
alias phd='c ~/WS/phd-rbo'
alias par='c ~/WS/parroplots && act'
alias grl='c ~/WS/test/goalRL-test'
alias blg='c ~/WS/duken72.github.io/_posts'
alias deu='c ~/WS/notes-deu'
# Others
alias rob='c ~/WS/rob'
alias  td='c ~/WS/TODO'
alias rwth='doc && c LEARN/master-robotics'
# ROS
for shell in zsh bash fish; do
    if [[ "$SHELL" == "/usr/bin/$shell" ]]; then
        alias ract='source devel/setup.$shell'
        break
    fi
done
function cd_ros_ws {
    cd "$1" && ract && cd src
}
alias r2ws='cd_ros_ws ~/WS/ros2_ws'
alias  rws='cd_ros_ws ~/WS/ros_ws'
alias  cws='cd_ros_ws ~/WS/catkin_ws'
alias  dws='cd_ros_ws ~/WS/duc_ws'

# TUB
# Connect to TU VPN
function tuvpn {
    STR=$(networkctl status)
    IP_LAB="130.149.238"
    if [[ "$STR" == *"$IP_LAB"* ]]; then
        echo "Already in the lab network"
    else
        echo "NOT in the lab network, connect via VPN ..."
        # tmux_start_detach_session tub-vpn "sudo openconnect -v -u duken72 --authgroup 2-TU-Full-Tunnel-2FA vpn.tu-berlin.de"
        tmux_start_detach_session tub-vpn "gtk-launch com.cisco.secureclient.gui"
    fi
}
# Un-mount and remove directory
function tum {
    for DIR in ~/WS/afs ~/WS/nas; do
        if mountpoint -q $DIR; then
            sudo umount $DIR
        fi
        if [ -d $DIR ]; then
            rmdir $DIR
        fi
    done
}
# Mount NAS directory
function mnas {
    if [ ! -d ~/WS/nas ]; then
        mkdir -p ~/WS/nas
    fi
    if mountpoint -q ~/WS/nas; then
        echo "Already mounted"
    else
        tuvpn
        sudo mount -t nfs -o rw,noatime,nodiratime,async storage.robotics.tu-berlin.de:/volume1/data/"$1" ~/WS/nas
    fi
    cd ~/WS/nas
}
# Mount AFS directory
function mafs {
    if [ ! -d ~/WS/afs ]; then
        mkdir -p ~/WS/afs
    fi
    if mountpoint -q ~/WS/afs; then
        echo "Already mounted"
    else
        echo "Mounting directory ..."
        sshfs duken72@sshgate.tu-berlin.de:/afs/tu-berlin.de/units/Fak_IV/robotics/"$1" ~/WS/afs
    fi
    cd ~/WS/afs
}
alias  nas='mnas ""'
alias nasd='mnas duc'
alias nasp='mnas parrobots'
alias  afs='mafs RBO'
alias afsd='mafs Staff/Duc'
alias afsa='mafs RBO/Studentische\ Hilfskräfte/Ohler,\ Anton\ -\ Duc/'
alias afst='mafs RBO/Teaching/Courses/robotics'

# Guide For Dummies
alias    bashg='cat $(fd bashFD.bash ~)'
alias     gitg='cat $(fd gitFD.bash ~)'
alias     vimg='cat $(fd vimFD.vim ~)'
alias    lessg='cat $(fd lessFD.bash ~)'
alias     rosg='cat $(fd rosFD.bash ~)'
alias    ros2g='cat $(fd ros2FD.bash ~)'
alias      pyg='cat $(fd pyFD.py ~)'
alias  dockerg='cat $(fd dockerFD.bash ~)'
alias   bashgg='rg $(fd bashFD.bash ~) -e'
alias    gitgg='rg $(fd gitFD.bash ~) -e'
alias    vimgg='rg $(fd vimFD.bash ~) -e'
alias    rosgg='rg $(fd rosFD.bash ~) -e'
alias   ros2gg='rg $(fd ros2FD.bash ~) -e'
alias     pygg='rg $(fd pyFD.py ~) -e'
alias dockergg='rg $(fd dockerFD.bash ~) -e'

# Panda IP
export FCI_IP=172.16.0.2
