/** Place your global snippets here.
Check: https://code.visualstudio.com/docs/editor/userdefinedsnippets

Each snippet includes: a snippet name, scope, prefix, description
and body. Typing the prefix triggers the snippet, the body will be
expanded and inserted.
Possible variables are: 
$1, $2 for tab stops, $0 for the final cursor position,
${1:label}, ${2:another} for placeholders. 
Placeholders with the same ids are connected.
Example:
"Print to console": {
	"scope": "javascript,typescript",
	"prefix": ["log", "log2"],
	"body": [
		"console.log('$1');",
		"$2"
	],
	"description": "Log output to console"
}
*/
{
"Add Bosch Copyright": {
	"scope": "cpp",
	"prefix": "copyright-bosch",
	"description": "Add Bosch Copyright",
	"body": [
		"${LINE_COMMENT} Copyright ${CURRENT_YEAR} Robert Bosch GmbH and its subsidiaries",
		"${LINE_COMMENT}",
		"${LINE_COMMENT} All rights reserved, also regarding any disposal, exploitation,",
		"${LINE_COMMENT} reproduction, editing, distribution, as well as in the event of",
		"${LINE_COMMENT} applications for industrial property rights.",
		"${LINE_COMMENT}",
		"${LINE_COMMENT} Author: Huu Duc Nguyen <fixed-term.huuduc.nguyen@de.bosch.com>",
		"${LINE_COMMENT} Created: ${CURRENT_DATE}-${CURRENT_MONTH_NAME_SHORT} ${CURRENT_YEAR}",
	]
},
	
"Add C++ include guard": {
	"scope": "cpp",
	"prefix": ["cpp-guard", "guard"],
	"description": "Adds an ifndef include guard to a C/C++ header",
	"body": [
		"#ifndef ${TM_DIRECTORY/(.*[\\/](\\w+$))/${2:/upcase}/}__${TM_FILENAME/^([^\\.]*)\\..*$/${1:/upcase}/}_${TM_FILENAME/^.*\\.([^\\.]*)$/${1:/upcase}/}_",
		"#define ${TM_DIRECTORY/(.*[\\/](\\w+$))/${2:/upcase}/}__${TM_FILENAME/^([^\\.]*)\\..*$/${1:/upcase}/}_${TM_FILENAME/^.*\\.([^\\.]*)$/${1:/upcase}/}_",
		"",
		"$0",
		"",
		"#endif  ${LINE_COMMENT} ${TM_DIRECTORY/(.*[\\/](\\w+$))/${2:/upcase}/}__${TM_FILENAME/^([^\\.]*)\\..*$/${1:/upcase}/}_${TM_FILENAME/^.*\\.([^\\.]*)$/${1:/upcase}/}_",
		""
	]
},

"C++ namespace": {
	"scope": "cpp",
	"prefix": ["cpp-namespace", "namespace"],
	"description": "Template for C++ namespace",
	"body": [
		"namespace ${0:${TM_DIRECTORY/(.*[\\/](\\w+$))/${2:/lowercase}/}}",
		"{",
		"",
		"}  ${LINE_COMMENT} namespace ${0:${TM_DIRECTORY/(.*[\\/](\\w+$))/${2:/lowercase}/}}",
		""
	]
},

"C++ class": {
	"scope": "cpp",
	"prefix": ["cpp-class", "class"],
	"description": "Template for C++ class",
	"body": [
		"class ${0:${TM_FILENAME_BASE/(^[a-z])|_([a-zA-Z])/${1:/upcase}${2:/upcase}/g}}",
		"{",
		"public:",
		"  ${0:${TM_FILENAME_BASE/(^[a-z])|_([a-zA-Z])/${1:/upcase}${2:/upcase}/g}}();",
		"  ~${0:${TM_FILENAME_BASE/(^[a-z])|_([a-zA-Z])/${1:/upcase}${2:/upcase}/g}}();",
		"protected:",
		"}; ",
		""
	]
},

"C++ main": {
	"scope": "cpp",
	"prefix": "main",
	"description": "C++ main",
	"body": [
		"int main()",
		"{",
		"    ${0}",
		"}"
	]
},

"C++ GCC optimization": {
	"scope": "cpp",
	"prefix": "gcc_opt",
	"description": "C++ GCC optimization",
	"body": [
		"#pragma GCC optimize(\"O2,unroll-loops\")",
		"#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")",
		""
	]
},

"Add shebang for Bash shell": {
	"scope": "shellscript",
	"prefix": ["shebang-bash", "bash"],
	"description": "Add shebang for Bash shell",
	"body": [
		"#!/bin/bash",
		"",
		"${0}"
	]
},

"Add shebang for Bourne shell": {
	"scope": "shellscript",
	"prefix": ["shebang-sh", "sh"],
	"description": "Add shebang for Bourne shell",
	"body": [
		"#!/bin/sh",
		"",
		"${0}"
	]
},

"Add shebang for Python": {
	"scope": "python",
	"prefix": ["shebang-python", "python"],
	"description": "Add shebang for Python",
	"body": [
		"#!/usr/bin/env python3",
		"",
		"${0}"
	]
},

"Add g++ for bash": {
	"scope": "shellscript",
	"prefix": "gcc",
	"description": "Add g++ for bash",
	"body": [
		"g++ -O2 -std=c++17 -Wall ${0}.cpp -o ${0}",
		""
	]
},

"Add g++ full for bash": {
	"scope": "shellscript",
	"prefix": "gccf",
	"description": "Add g++ full for bash",
	"body": [
		"g++ -O2 -I../include -L../lib -std=c++17 - Wall ${0}.cpp -o out",
		""
	]
},
"Python main": {
	"scope": "python",
	"prefix": "main",
	"description": "Python main",
	"body": [
		"def main():",
		"    ${0}",
		"",
		"if __name__ == \"__main__\":",
		"    main()",
		""
	]
},

"Add ignore line for Markdown TOC": {
	"scope": "markdown",
	"prefix": ["md-toc-ignore", "toc-ignore"],
	"description": "Add ignore line for Markdown TOC",
	"body": [
		"<!-- omit in toc -->"
	]
},

"Add line break for Markdown": {
	"scope": "markdown",
	"prefix": ["md-line-break", "line-break"],
	"description": "Add line break Markdown",
	"body": [
		"",
		"-------",
		"",
		"${0}"
	]
},

"Add HTML size for Markdown": {
	"scope": "markdown",
	"prefix": ["md-html-size", "html-size"],
	"description": "Add HTML size for Markdown",
	"body": [
		"<font size=\"4\">${0}</font>"
	]
},

"Add template for VSCode snippet": {
	"prefix": "vscode-snippet",
	"description": "Add template for VSCode snippet",
	"body": [
		"\"${1}\": {",
		"    \"scope\": \"${2}\",",
		"    \"prefix\": \"${3}\",",
		"    \"description\": \"${1}\",",
		"    \"body\": [",
		"        \"${0}\",",
		"        \"\"",
		"    ]",
		"},"
	]
},

"Add latex bibliography template for @online": {
	"scope": "bibtex",
	"prefix": "latex-bibliography-online",
	"description": "Add latex bibliography template for @online",
	"body": [
		"@online{${1},",
		"  url     = {${2}},",
		"  title   = {${3}},",
		"  author  = {${0}},",
		"  urldate = {2022-02-07},",
		"  year    = {1995},",
		"}"
	]
},
}
